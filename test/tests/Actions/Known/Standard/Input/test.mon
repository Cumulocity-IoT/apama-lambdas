using utils.TestRunner;

event TestEvent {
	integer value;
}

monitor Test {  
	action onload() {
		TestRunner.create()
			.addTest("10.pow(2)", new sequence<any>, 100, "integer pow")
			.addTest("10.pow(-2)", new sequence<any>, 0.01, "integer negative pow")
			.addTest("10.0.pow(2.0)", new sequence<any>, 100.0, "float pow")
			.addTest("10.0d.pow(2.0d)", new sequence<any>, 100.0d, "double pow")
		
			.addTest("16.sqrt()", new sequence<any>, 4.0, "integer sqrt")
			.addTest("16.0.sqrt()", new sequence<any>, 4.0, "float sqrt")
			.addTest("16.0d.sqrt()", new sequence<any>, 4.0d, "double sqrt")
		
			.addTest("16.toFloat()", new sequence<any>, 16.0, "integer toFloat")
			.addTest("16.0.toFloat()", new sequence<any>, 16.0, "float toFloat")
			.addTest("16.0d.toFloat()", new sequence<any>, 16.0, "double toFloat")
		
			.addTest("16.toDecimal()", new sequence<any>, 16.0d, "integer toDecimal")
			.addTest("16.0.toDecimal()", new sequence<any>, 16.0d, "float toDecimal")
			.addTest("16.0d.toDecimal()", new sequence<any>, 16.0d, "double toDecimal")

			.addTest("16.round()", new sequence<any>, 16, "integer round")
			.addTest("15.5.round()", new sequence<any>, 16, "float round")
			.addTest("15.5d.round()", new sequence<any>, 16, "double round")
			
			.addTest("16.ceil()", new sequence<any>, 16, "integer ceil")
			.addTest("16.1.ceil()", new sequence<any>, 17, "float ceil")
			.addTest("16.1d.ceil()", new sequence<any>, 17, "double ceil")
		
			.addTest("16.floor()", new sequence<any>, 16, "integer floor")
			.addTest("16.9.floor()", new sequence<any>, 16, "float floor")
			.addTest("16.9d.floor()", new sequence<any>, 16, "double floor")

			.addTest("16.toString()", new sequence<any>, "16", "integer toString")
			.addTest("'Hello'.toString()", new sequence<any>, "Hello", "string toString")
			.addTest("x => x.toString()", [<any>TestEvent(1)], "TestEvent(1)", "object toString")

			.addTest("x => x.get('b')", [<any>{"a": 1, "b": 2}], 2, "dictionary get")
			.addTest("x => x.get(1)", [<any>[1,2,3]], 2, "sequence get")

			.addTest("x => x.getOrDefault('b')", [<any>{"a": 1, "b": 2}], 2, "dictionary getOrDefault")
			.addTest("x => x.getOrDefault('c')", [<any>{"a": 1, "b": 2}], 0, "dictionary getOrDefault non-existing")
			.addTest("x => x.getOrDefault(TestEvent(1))", [<any>{TestEvent(1): 2}], 2, "dictionary getOrDefault customType")
			.addTest("x => x.getOrDefault(TestEvent(2))", [<any>{TestEvent(1): 2}], 0, "dictionary getOrDefault customType - non-existing")
			.addTest("x => x.getOrDefault(1)", [<any>[1,2,3]], 2, "sequence getOrDefault")
			.addTest("x => x.getOrDefault(3)", [<any>[1,2,3]], 0, "sequence getOrDefault non-existing")
		
			.addTest("x => x.getOr('b', 3)", [<any>{"a": 1, "b": 2}], 2, "dictionary getOr")
			.addTest("x => x.getOr('c', 3)", [<any>{"a": 1, "b": 2}], 3, "dictionary getOr non-existing")
			.addTest("x => x.getOr(1, 5)", [<any>[1,2,3]], 2, "sequence getOr")
			.addTest("x => x.getOr(3, 5)", [<any>[1,2,3]], 5, "sequence getOr non-existing")

			.addTest("x => x.hasKey('a')", [<any>{"a": 1, "b": 2}], true, "dictionary hasKey")
			.addTest("x => x.hasKey('c')", [<any>{"a": 1, "b": 2}], false, "dictionary hasKey")
			.addTest("x => x.hasKey(123)", [<any>{"a": 1, "b": 2, "123": 3}], true, "dictionary hasKey - type coercion")
			         
			.run();
	}  
}
