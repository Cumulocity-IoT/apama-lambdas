/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.lambdas.internals;

using com.apama.exceptions.Exception;

event KnownActions {
	static action pow(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"pow\" must have 1 argument", "IllegalArgumentException");
		}
		any argVal := args[0];
		
		switch (subject) {
			case integer: {
				switch(argVal) {
					case integer: {
						if argVal >= 0 {
							return subject.pow(argVal);
						} else {
							return subject.toFloat().pow(argVal.toFloat());
						}
					}
					case float: {
						return subject.toFloat().pow(argVal);
					}
					case decimal: {
						return subject.toDecimal().pow(argVal);
					}
				}
			}
			case float: {
				switch(argVal) {
					case integer: {
						return subject.pow(argVal.toFloat());
					}
					case float: {
						return subject.pow(argVal);
					}
					case decimal: {
						return subject.pow(argVal.toFloat());
					}
				}
			}
			case decimal: {
				switch(argVal) {
					case integer: {
						return subject.pow(argVal.toDecimal());
					}
					case float: {
						return subject.toFloat().pow(argVal);
					}
					case decimal: {
						return subject.pow(argVal);
					}
				}
			}
		}
	}
	
	static action sqrt(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"sqrt\" must have 0 arguments", "IllegalArgumentException");
		}
		switch (subject) {
			case integer: {
				return subject.toFloat().sqrt();
			}
			case float: {
				return subject.sqrt();
			}
			case decimal: {
				return subject.sqrt();
			}
		}
	}
	
	static action toFloat(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"toFloat\" must have 0 arguments", "IllegalArgumentException");
		}
		switch(subject) {
			case integer: {
				return subject.toFloat();
			}
			case float: {
				return subject;
			}
			case decimal: {
				return subject.toFloat();
			}
		}
	}
	
	static action toDecimal(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"toDecimal\" must have 0 arguments", "IllegalArgumentException");
		}
		switch(subject) {
			case integer: {
				return subject.toDecimal();
			}
			case float: {
				return subject.toDecimal();
			}
			case decimal: {
				return subject;
			}
		}
	}
	
	static action ceil(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"ceil\" must have 0 arguments", "IllegalArgumentException");
		}
		switch(subject) {
			case integer: {
				return subject;
			}
			case float: {
				return subject.ceil();
			}
			case decimal: {
				return subject.ceil();
			}
		}
	}
	
	static action floor(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"floor\" must have 0 arguments", "IllegalArgumentException");
		}
		switch(subject) {
			case integer: {
				return subject;
			}
			case float: {
				return subject.floor();
			}
			case decimal: {
				return subject.floor();
			}
		}
	}
	
	static action round(any subject, sequence<any> args) returns any {
		if args.size() != 0 {
			throw Exception("action \"round\" must have 0 arguments", "IllegalArgumentException");
		}
		switch(subject) {
			case integer: {
				return subject;
			}
			case float: {
				return subject.round();
			}
			case decimal: {
				return subject.round();
			}
		}
	}
	
	static action get(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"get\" must have 1 argument", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getEntry(TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject)));
		} else if typeName.find("sequence<") = 0 {
			return subject.getEntry(TypeCoercion.coerceValue(args[0], "integer"));
		} else {
			throw Exception("Can't call get on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action getOrDefault(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"getOrDefault\" must have 1 argument", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getAction("getOrDefault").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject))]);
		} else if typeName.find("sequence<") = 0 {
			try {
				return subject.getEntry(TypeCoercion.coerceValue(args[0], "integer"));
			} catch(Exception e) {
				return any.newInstance(Types.getSequenceValueType(subject));
			}
		} else {
			throw Exception("Can't call getOrDefault on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action getOr(any subject, sequence<any> args) returns any {
		if args.size() != 2 {
			throw Exception("action \"getOr\" must have 2 arguments", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getAction("getOr").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject)), TypeCoercion.coerceValue(args[1], Types.getDictionaryValueType(subject))]);
		} else if typeName.find("sequence<") = 0 {
			try {
				return subject.getEntry(TypeCoercion.coerceValue(args[0], "integer"));
			} catch(Exception e) {
				return TypeCoercion.coerceValue(args[1], Types.getSequenceValueType(subject));
			}
		} else {
			throw Exception("Can't call getOr on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action getOrAdd(any subject, sequence<any> args) returns any {
		if args.size() != 2 {
			throw Exception("action \"getOrAdd\" must have 2 arguments", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getAction("getOrAdd").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject)), TypeCoercion.coerceValue(args[1], Types.getDictionaryValueType(subject))]);
		} else {
			throw Exception("Can't call getOrAdd on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action getOrAddDefault(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"getOrAddDefault\" must have 1 argument", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getAction("getOrAddDefault").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject))]);
		} else {
			throw Exception("Can't call getOrAddDefault on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action add(any subject, sequence<any> args) returns any {
		if args.size() != 2 {
			throw Exception("action \"add\" must have 2 arguments", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			subject.setEntry(TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject)), TypeCoercion.coerceValue(args[1], Types.getDictionaryValueType(subject)));
			return new any;
		} else {
			throw Exception("Can't call add on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action append(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"append\" must have 1 argument", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("sequence<") = 0 {
			return subject.getAction("append").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getSequenceValueType(subject))]);
		} else {
			throw Exception("Can't call append on " + subject.toString(), "RuntimeException");
		}
	}
	
	static action hasKey(any subject, sequence<any> args) returns any {
		if args.size() != 1 {
			throw Exception("action \"hasKey\" must have 1 argument", "IllegalArgumentException");
		}
		string typeName := subject.getTypeName();
		if typeName.find("dictionary<") = 0 {
			return subject.getAction("hasKey").getGenericAction()([TypeCoercion.coerceValue(args[0], Types.getDictionaryKeyType(subject))]);
		} else {
			throw Exception("Can't call hasKey on " + subject.toString(), "RuntimeException");
		}
	}
}