/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.lambdas.internals;

using com.apama.exceptions.Exception;

event Undefined {
	string name;
	static action create(string name) returns action<> returns any {
		return Undefined(name).getter;
	}
	
	action getter() returns any {
		throw Exception("Value: " + name + " was not provided", "UndefinedValue");
	}
}

event ClosureActionHandler {
	dictionary<string, action<> returns any> closureGetters; 
	string actionName; 
	sequence<action<> returns any> args;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string actionName, sequence<action<> returns any> args) returns action<> returns any {
		return ClosureActionHandler(closureGetters, actionName, args).callback;
	}
	
	action callback() returns any {
		any action_ := closureGetters[actionName]();
		action<sequence<any> > returns any genericAction := action_.getGenericAction();
		
		sequence<any> argValues := new sequence<any>;
		
		dictionary<string, string> paramTypes := action_.getActionParameters();
		integer i := 0;
		string paramName;
		for paramName in action_.getActionParameterNames() {
			string paramType := paramTypes[paramName];
			argValues.append(TypeCoercion.coerceValue(args[i](), paramType));
			i := i + 1;
		}
		
		return genericAction(argValues);
	}
}

event ActionHandler {
	action<> returns any subject;
	string actionName;
	sequence<action<> returns any> args;
	action<any, sequence<any> > returns any knownActionHandler;
	dictionary<string, dictionary<string, action<any, sequence<any> > returns any > > actionOverridesByType;
	
	static action create(action<> returns any subject, string actionName, sequence<action<> returns any> args) returns action<> returns any {		
		dictionary<string, action<any, sequence<any> > returns any > knownActions := {
			"sqrt": KnownActions.sqrt,
			"toFloat": KnownActions.toFloat,
			"toDecimal": KnownActions.toDecimal,
			"ceil": KnownActions.ceil,
			"floor": KnownActions.floor,
			"round": KnownActions.round,
			"get": KnownActions.get,
			"getOr": KnownActions.getOr,
			"getOrDefault": KnownActions.getOrDefault,
			"getOrAdd": KnownActions.getOrAdd,
			"getOrAddDefault": KnownActions.getOrAddDefault,
			"hasKey": KnownActions.hasKey,
			"append": KnownActions.append,
			"add": KnownActions.add
		};
		
		dictionary<string, dictionary<string, action<any, sequence<any> > returns any > > actionOverridesByType := {
			"integer": {
				"pow": KnownActions.pow
			}
		};
		
		if (knownActions.hasKey(actionName)) {
			return ActionHandler(subject, actionName, args, knownActions[actionName], actionOverridesByType).callback;
		} else {
			return ActionHandler(subject, actionName, args, new action<any, sequence<any> > returns any, actionOverridesByType).callback;
		}
	}
	
	action callback() returns any {
		sequence<any> argVals := new sequence<any>;
		action<> returns any arg;
		for arg in args {
			argVals.append(arg());
		}
		
		any subjectVal := subject();
		string subjectType := subjectVal.getTypeName();
		
		// Try to get the action from the object, if it doesn't exist then check the known actions
		any act;
		if actionOverridesByType.hasKey(subjectType) and actionOverridesByType[subjectType].hasKey(actionName) {
			return actionOverridesByType[subjectType][actionName](subjectVal, argVals);
		} else {
			try {
				act := subjectVal.getAction(actionName);
			} catch(Exception e) {
				ifpresent knownActionHandler {	
					return knownActionHandler(subjectVal, argVals);
				} else {
					throw Exception("No action " + actionName + " available on " + subjectVal.toString(), "RuntimeException");
				}
			}
		}
		
		dictionary<string, string> paramTypes;
		try {
			paramTypes := act.getActionParameters();
		} catch(Exception e) {
			// Try to enable all builtin actions to be coerced by wrapping for signatures that we know about (all combinations of "action<primitive|none> returns primitive|none" and some others)
			act := WrapBuiltinAction.create(act);
			try {
				paramTypes := act.getActionParameters();
			} catch(Exception e) {
				// Try to call with specific handling for complicated ones like dictionary/sequence
				ifpresent knownActionHandler {	
					return knownActionHandler(subjectVal, argVals);
				} else {
					// Attempt to call without coercion
					return act.getGenericAction()(argVals);
				}
			}
		}
	
		if paramTypes.size() != argVals.size() {
			throw Exception("action \"" + actionName + "\" must have " + paramTypes.size().toString() + " arguments", "IllegalArgumentException");
		}
	
		// Coerce the values to their appropriate type
		string paramName;
		integer i := 0;
		for paramName in act.getActionParameterNames() {
			argVals[i] := TypeCoercion.coerceValue(argVals[i], paramTypes[paramName]);
			i := i + 1;
		}
		
		return act.getGenericAction()(argVals);
	}
}

event TernaryHandler {
	action<> returns any condition;
	action<> returns any left;
	action<> returns any right;
	
	static action create(action<> returns any condition, action<> returns any left, action<> returns any right) returns action<> returns any {
		return TernaryHandler(condition, left, right).ternary;
	}
	
	action ternary() returns any {
		if <boolean> condition() {
			return left();
		} else {
			return right();
		}
	}
}

event ValueFromClosure {
	dictionary<string, action<> returns any> closureGetters;
	string objectName;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string objectName) returns action<> returns any {
		return ValueFromClosure(closureGetters, objectName).callback;
	}
	
	action callback() returns any {
		if not closureGetters.hasKey(objectName) {
			throw Exception("Unknown object: " + objectName, "CompilationException");
		}
		return closureGetters[objectName]();
	}
}

event SequenceHandler {
	sequence<action<> returns sequence<any> > sequenceValues;
	
	static action create(sequence<action<> returns sequence<any> > sequenceValues) returns action<> returns any {
		return SequenceHandler(sequenceValues).toSequence;
	}
	
	action toSequence() returns any {
		sequence<any> result := new sequence<any>;
		action<> returns sequence<any> value;
		for value in sequenceValues {
			result.appendSequence(value());
		}
		return result;
	}
}

event SequenceSingleValueHandler {
	action<> returns any value;
	
	static action create(action<> returns any value) returns action<> returns sequence<any> {
		return SequenceSingleValueHandler(value).toValue;
	}
	
	action toValue() returns sequence<any> {
		return [value()];
	}
}

event SequenceMultipleValueHandler {
	action<> returns any values;
	
	static action create(action<> returns any values) returns action<> returns sequence<any> {
		return SequenceMultipleValueHandler(values).toValue;
	}
	
	action toValue() returns sequence<any> {
		any resolvedValues := values();
		if resolvedValues.getTypeName().find("sequence") = 0 {
			return resolvedValues.getEntries();
		} else {
			throw Exception("Can't spread: " + resolvedValues.valueToString(), "RuntimeException");
		}
	}
}

event ValueGetter {
	any value;
	
	static action create(any value) returns action<> returns any {
		return ValueGetter(value).callback;
	}
	
	action callback() returns any {
		return value;
	}
}

event CurrentTime {
	static action get() returns any {
		return currentTime;
	}
}

event EventConstructor {
	string eventName;
	sequence<action<> returns any> args;
	
	static action create(string eventName, sequence<action<> returns any> args) returns action<> returns any {
		return EventConstructor(eventName, args).construct;
	}
	
	action construct() returns any {
		any result := any.newInstance(eventName);
		sequence<string> fieldTypes := result.getFieldTypes();
		integer i := 0;
		string fieldName;
		for fieldName in result.getFieldNames() {
			string fieldType := fieldTypes[i];
			any value := TypeCoercion.coerceValue(args[i](), fieldType);
			result.setField(fieldName, value);
			i := i + 1;
		}
		return result;
	}
}

event FieldAccess {
	dictionary<string, action<> returns any> closureGetters;
	string objectName;
	action<> returns any fieldKey;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string objectName, action<> returns any fieldKey) returns action<> returns any {
		return FieldAccess(closureGetters, objectName, fieldKey).callback;
	}
	
	action callback() returns any {
		if not closureGetters.hasKey(objectName) {
			throw Exception("Unknown object: " + objectName, "CompilationException");
		}
		return closureGetters[objectName]().getEntry(fieldKey());
	}
}

event BracketLocation {
	boolean isActionOrConstructorCall;
	integer start;
}

event ExpressionCompiler {
	string expression;
	dictionary<string, action<> returns any> closureGetters;
	
	static action create(string expression, dictionary<string, action<> returns any> closureGetters) returns ExpressionCompiler {
		addLanguageValuesToClosure(closureGetters);
		return ExpressionCompiler(expression, closureGetters);
	}
	
	static action addLanguageValuesToClosure(dictionary<string, action<> returns any> closureGetters) {
		// Must use getOrAdd, we don't want to overwrite any user provided values
		action<> returns any discard := closureGetters.getOrAdd("currentTime", CurrentTime.get);
	}
	
	action compile() returns action<> returns any {
		expression := expression.ltrim().rtrim();
		literalsToPointers();
		squareBracketsToActions();
		bracketsToActions();
		fieldAccessToActions();
		unarySubtractToAction();
		operatorsToActions();
		unaryNegateToActions();
		booleanOperatorsToActions();
		ternaryOperatorToActions();
		return toAction();
	}
	
	action literalsToPointers() {
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter.matches("([$_a-zA-Z]|(\\)\\.))") { // Check for variables and/or methodCalls
				integer lengthOfVar := remainingString.search("(\\$|\\w|\\.)+")[0].length();
				string variableName := remainingString.substring(0, lengthOfVar);
				
				if variableName.matches("^true($|(?!\\$|\\w))") { // Boolean literals
					string substitutionName := "$_" + integer.getUnique().toString();
					closureGetters.add(substitutionName, ValueGetter.create(true));
					expression := expression.substring(0, i) + substitutionName + expression.substring(i + "true".length(), expression.length());
					i := i + lengthOfVar - "true".length() + substitutionName.length();
					continue;
				} else if variableName.matches("^false($|(?!\\$|\\w))") {
					string substitutionName := "$_" + integer.getUnique().toString();
					closureGetters.add(substitutionName, ValueGetter.create(false));
					expression := expression.substring(0, i) + substitutionName + expression.substring(i + "false".length(), expression.length());
					i := i + lengthOfVar - "false".length() + substitutionName.length();
					continue;
				} else {
					i := i + lengthOfVar;
					continue;
				}
			// Check for numeric values
			} else if currentCharacter.matches("\\d") {
				integer lengthOfValue := remainingString.search("\\d+(\\.\\d+d?)?")[0].length();
				string valueString := remainingString.substring(0, lengthOfValue);
				string substitutionName := "$_" + integer.getUnique().toString();
				if valueString.find("d") != -1 {
					closureGetters.add(substitutionName, ValueGetter.create(decimal.parse(valueString)));
				} else if valueString.find(".") != -1 {
					closureGetters.add(substitutionName, ValueGetter.create(float.parse(valueString)));
				} else {
					closureGetters.add(substitutionName, ValueGetter.create(integer.parse(valueString)));
				}
				expression := expression.substring(0, i) + substitutionName + expression.substring(i + lengthOfValue, expression.length());
				continue;
			} else if currentCharacter = "\"" or currentCharacter = "'" { // Check for string values
				string quoteType := currentCharacter;
				boolean foundEnd := false;
				integer lengthOfString := 1;
				while lengthOfString < remainingString.length() {
					string currentCharacter := remainingString.substring(lengthOfString, lengthOfString+1);
					lengthOfString := lengthOfString + 1;
					if currentCharacter = "\\" { // Skip escaped characters
						lengthOfString := lengthOfString + 1;
					} else if currentCharacter = quoteType { // Found end of string
						foundEnd := true;
						break;
					}
				}
				if not foundEnd {
					throw Exception("String value not closed, no matching: " + quoteType, "CompilationException");
				}
				string valueString := remainingString.substring(1, lengthOfString-1);
				if quoteType = "'" {
					valueString := valueString.replaceAll("\"", "\\\"");
					valueString := valueString.replaceAll("\\'", "'");
				}
				string substitutionName := "$_" + integer.getUnique().toString();
				closureGetters.add(substitutionName, ValueGetter.create(string.parse("\"" + valueString + "\"")));
				expression := expression.substring(0, i) + substitutionName + expression.substring(i + lengthOfString, expression.length());
				continue;
			}
			i := i + 1;
		}
	}
	
	action squareBracketsToActions() {
		boolean isDictionaryAccess := false;
		sequence<BracketLocation> brackets := new sequence<BracketLocation>;
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "[" {
				brackets.append(BracketLocation(isDictionaryAccess, i));
				isDictionaryAccess := false;
			} else if currentCharacter = "]" {
				BracketLocation completedBracket := brackets[brackets.size() - 1];
				if completedBracket.isActionOrConstructorCall {
					// This is field, dictionary, or array access (it is handled in the fieldAccess section)
				} else {
					// This is sequence literal
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					
					sequence<action<> returns sequence<any> > sequenceValues := new sequence<action<> returns sequence<any> >;
					if not innerExpression.matches("\\s*") {
						string value;
						for value in ",".split(innerExpression) {
							value := value.ltrim();
							if value.length() > 3 and value.substring(0,3) = "..." {
								// Handle spread operator
								value := value.substring(3, value.length());
								sequenceValues.append(SequenceMultipleValueHandler.create(ExpressionCompiler.create(value, closureGetters).compile()));
							} else {
								sequenceValues.append(SequenceSingleValueHandler.create(ExpressionCompiler.create(value, closureGetters).compile()));
							}
						}
					}

					string innerPointerName := "$_" + integer.getUnique().toString();
					closureGetters.add(innerPointerName, SequenceHandler.create(sequenceValues));
					
					expression := expression.substring(0, completedBracket.start) + innerPointerName + expression.substring(i + 1, expression.length());
					i := completedBracket.start + innerPointerName.length() - 1;
				}
				brackets.remove(brackets.size() - 1);
			} else if currentCharacter.matches("\\$|\\w") {
				isDictionaryAccess := true;
			} else {
				isDictionaryAccess := false;
			}
			i := i + 1;
		}
	}
	
	action bracketsToActions() {
		boolean isActionOrConstructorCall := false;
		sequence<BracketLocation> brackets := new sequence<BracketLocation>;
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "(" {
				brackets.append(BracketLocation(isActionOrConstructorCall, i));
				isActionOrConstructorCall := false;
			} else if currentCharacter = ")" {
				BracketLocation completedBracket := brackets[brackets.size() - 1];
				if completedBracket.isActionOrConstructorCall {
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					
					string beforeBracket := expression.substring(0, completedBracket.start);
					
					boolean isEventConstruction := false;
					optional<string> eventName := firstMatch(beforeBracket, "(\\)|\\$|\\w|\\.)+$"); // Check to see if it's an event construction
					ifpresent eventName {
						if eventName.matches("\\w(\\w|\\.)*") {
							// If the event is valid then we assume they meant to construct an event
							// Otherwise it's probably a method call
							boolean isValidEvent := true;
							
							// Check if the event has been hidden by a variable
							optional<string> root := firstMatch(eventName, "^\\w+");
							ifpresent root { 
								if closureGetters.hasKey(root) {
									// The event has been hidden
									isValidEvent := false;
								}
							}
							if isValidEvent {
								try {
									any test := any.newInstance(eventName); // Try constructing the event to see if it is valid								
								} catch(Exception e) {
									isValidEvent := false;
								}
							}
							if isValidEvent {
								sequence<action<> returns any> args := new sequence<action<> returns any>;
								if not innerExpression.matches("\\s*") {
									sequence<string> argStrings := ",".split(innerExpression);
									string arg;
									for arg in argStrings {
										args.append(ExpressionCompiler.create(arg, closureGetters).compile());
									}
								}
								string actionPointerName := "$_" + integer.getUnique().toString();
								closureGetters.add(actionPointerName, EventConstructor.create(eventName, args));
								expression := expression.substring(0, completedBracket.start - eventName.length()) + actionPointerName + expression.substring(i + 1, expression.length());
								i := completedBracket.start + actionPointerName.length() - eventName.length() - 1;
								isEventConstruction := true;
							}
						}
					}
					if not isEventConstruction {
						// It must be an action call
						string fieldAccessAndActionName := firstMatch(beforeBracket, "(\\.|\\$|\\w)+$").getOrThrow();
						
						ifpresent firstMatch(fieldAccessAndActionName, "\\.(\\$|\\w)+$") as actionNameAndDot {
							// We've possibly got a named action call
							string actionName := actionNameAndDot.substring(".".length(), actionNameAndDot.length());
							string fieldAccess := fieldAccessAndActionName.substring(0, fieldAccessAndActionName.length() - actionName.length() - ".".length());
							
							action<> returns any subject := ExpressionCompiler.create(fieldAccess, closureGetters).compile();
							
							sequence<action<> returns any> args := new sequence<action<> returns any>;
							if not innerExpression.matches("\\s*") {
								sequence<string> argStrings := ",".split(innerExpression); // safe to split because all other commas will have been removed
								string arg;
								for arg in argStrings {
									args.append(ExpressionCompiler.create(arg, closureGetters).compile());
								}
							}

							string actionPointerName := "$_" + integer.getUnique().toString();
							closureGetters.add(actionPointerName, ActionHandler.create(subject, actionName, args));
							expression := expression.substring(0, completedBracket.start - fieldAccessAndActionName.length()) + actionPointerName + expression.substring(i + 1, expression.length());
							i := completedBracket.start + actionPointerName.length() - fieldAccessAndActionName.length() - 1;
						} else {
							// This is an action directly from the closure
							string actionName := fieldAccessAndActionName;

							sequence<action<> returns any> args := new sequence<action<> returns any>;
							if not innerExpression.matches("\\s*") {
								sequence<string> argStrings := ",".split(innerExpression); // safe to split because all other commas will have been removed
								string arg;
								for arg in argStrings {
									args.append(ExpressionCompiler.create(arg, closureGetters).compile());
								}
							}
							
							string actionPointerName := "$_" + integer.getUnique().toString();
							closureGetters.add(actionPointerName, ClosureActionHandler.create(closureGetters, actionName, args));
							expression := expression.substring(0, completedBracket.start - fieldAccessAndActionName.length()) + actionPointerName + expression.substring(i + 1, expression.length());
							i := completedBracket.start + actionPointerName.length() - fieldAccessAndActionName.length() - 1;
						}
					}
				} else {
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					string innerPointerName := "$_" + integer.getUnique().toString();
					closureGetters.add(innerPointerName, ExpressionCompiler.create(innerExpression, closureGetters).compile());
					expression := expression.substring(0, completedBracket.start) + innerPointerName + expression.substring(i + 1, expression.length());
					i := completedBracket.start + innerPointerName.length() - 1;
				}
				brackets.remove(brackets.size() - 1);
			} else if currentCharacter.matches("\\$|\\w") {
				isActionOrConstructorCall := true;
			} else {
				isActionOrConstructorCall := false;
			}
			i := i + 1;
		}
	}
	
	action fieldAccessToActions() {
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string processedString := expression.substring(0, i);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "." { // Check for variables and/or methodCalls
				string objectName := processedString.search("(\\$|\\w)+$")[0];
				string fieldName := remainingString.substring(1, remainingString.length()).search("^(\\$|\\w)+")[0];
				// TODO: handle methodCalling
				string actionPointerName := "$_" + integer.getUnique().toString();
				closureGetters.add(actionPointerName, FieldAccess.create(closureGetters, objectName, ValueGetter.create(fieldName)));
				expression := expression.substring(0, i - objectName.length()) + actionPointerName + expression.substring(i + fieldName.length() + 1, expression.length());
				i := i - objectName.length() + actionPointerName.length() - 1;
			} else if currentCharacter = "[" and i > 0 and expression.substring(i-1, i).matches("(\\$|\\w)") { // Check for fieldAccess via sqrBrackets
				integer bracketCount := 1;
				integer j := i + 1;
				while j < expression.length() {
					string currentCharacter := expression.substring(j, j+1);
					if currentCharacter = "[" {
						bracketCount := bracketCount + 1;
					} else if currentCharacter = "]" {
						bracketCount := bracketCount - 1;
						if bracketCount = 0 {
							string objectName := processedString.search("(\\$|\\w)+$")[0];
							string fieldKeyExp := expression.substring(i + 1, j);
							string actionPointerName := "$_" + integer.getUnique().toString();
							closureGetters.add(actionPointerName, FieldAccess.create(closureGetters, objectName, ExpressionCompiler.create(fieldKeyExp, closureGetters).compile()));
							expression := expression.substring(0, i - objectName.length()) + actionPointerName + expression.substring(j + 1, expression.length());
							i := i - objectName.length() + actionPointerName.length() - 1;
						}
					}
					j := j + 1;
				}
				if bracketCount > 0 {
					throw Exception("Unmatched bracket '['", "CompilationException");
				}
			}
			i := i + 1;
		}
	}
	
	action operatorsToActions() {
		sequence<string> operatorPrecedence := ["%", "/", "*", "-", "+"];		
		string operator;
		for operator in operatorPrecedence {
			operatorToActions(operator);
		}
	}
	
	action operatorToActions(string operator) {
		dictionary<string, action<action<> returns any, action<> returns any> returns any> operators := {
			"%": Operators.mod,
			"/": Operators.divide,
			"*": Operators.multiply,
			"-": Operators.minus,
			"+": Operators.plus,
			"=": Operators.equals,
			"!=": Operators.notEquals,
			">=": Operators.greaterThanEq,
			">": Operators.greaterThan,
			"<=": Operators.lessThanEq,
			"<": Operators.lessThan,
			"and": Operators.logicalAnd,
			"xor": Operators.logicalXor,
			"or": Operators.logicalOr
		};
		
		integer i := 0;
		while i < expression.length() - (operator.length() - 1) {
			string currentCharacter := expression.substring(i, i + operator.length());
			string processedString := expression.substring(0, i);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = operator {
				optional<string> leftObject := firstMatch(processedString, "(\\$|\\w)+\\s*$");
				ifpresent leftObject {
					optional<string> rightObject := firstMatch(remainingString.substring(operator.length(), remainingString.length()), "^\\s*(\\$|\\w)+");
					ifpresent rightObject {
						string actionPointerName := "$_" + integer.getUnique().toString();
						closureGetters.add(actionPointerName, OperatorHandler.create(operators[operator], closureGetters, leftObject.rtrim(), rightObject.ltrim()));
						expression := expression.substring(0, i - leftObject.length()) + actionPointerName + expression.substring(i + rightObject.length() + operator.length(), expression.length());
						i := i - leftObject.length() + actionPointerName.length() - 1;
					}
				}
			}
			i := i + 1;
		}
	}
	

	action booleanOperatorsToActions() {
		sequence<string> operatorPrecedence := ["=", "!=", ">=", ">", "<=", "<", "and", "xor", "or"];
		
		string operator;
		for operator in operatorPrecedence {
			operatorToActions(operator);
		}
	}
	
	action unarySubtractToAction() {
		if expression.matches("^\\s*-.*") {
			string negateString := expression.search("^\\s*-")[0];
			string rightObject := expression.substring(negateString.length(), expression.length()).search("^\\s*(\\$|\\w)+")[0];
			
			string actionPointerName := "$_" + integer.getUnique().toString();
			closureGetters.add(actionPointerName, UnarySubtract.create(closureGetters, rightObject.ltrim()));
			expression := actionPointerName + expression.substring(rightObject.length() + negateString.length(), expression.length());
		}
	}
	
	action unaryNegateToActions() {
		sequence<string> operators := ["not", "!"];
		string operator;
		for operator in operators {
			integer i := 0;
			while i < expression.length() - (operator.length() - 1) {
				string currentCharacter := expression.substring(i, i+operator.length());
				string processedString := expression.substring(0, i);
				string remainingString := expression.substring(i, expression.length());
				if currentCharacter = operator {
					optional<string> rightObject := firstMatch(remainingString.substring(operator.length(), remainingString.length()), "^\\s*(\\$|\\w)+");
					ifpresent rightObject {
						string actionPointerName := "$_" + integer.getUnique().toString();
						closureGetters.add(actionPointerName, UnaryNegate.create(closureGetters, rightObject.ltrim()));
						expression := expression.substring(0, i) + actionPointerName + expression.substring(i + rightObject.length() + operator.length(), expression.length());
						i := i + actionPointerName.length() - 1;
					}
				}
				i := i + 1;
			}
		}
	}
	
	action ternaryOperatorToActions() {
		integer count := 0;
		integer ternaryStart := 0;
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string processedString := expression.substring(0, i);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "?" {
				if count = 0 {
					ternaryStart := i;
				}
				count := count + 1;
			} else if currentCharacter = ":" {
				count := count - 1;
				if count = 0 {
					string conditionString := expression.substring(0, ternaryStart);
					string leftString := expression.substring(ternaryStart + 1, i);
					string rightString := expression.substring(i + 1, expression.length());

					action<> returns any condition := ExpressionCompiler.create(conditionString, closureGetters).compile();
					action<> returns any left := ExpressionCompiler.create(leftString, closureGetters).compile();
					action<> returns any right := ExpressionCompiler.create(rightString, closureGetters).compile();
					
					string actionPointerName := "$_" + integer.getUnique().toString();
					closureGetters.add(actionPointerName, TernaryHandler.create(condition, left, right));
					expression := actionPointerName;
					return;
				}
			}
			i := i + 1;
		}
	}
	
	action toAction() returns action<> returns any {
		expression := expression.ltrim().rtrim();
		return ValueFromClosure.create(closureGetters, expression);
	}
	
	static action firstMatch(string value, string regex) returns optional<string> {
		sequence<string> matches := value.search(regex);
		if matches.size() > 0 {
			return optional<string>(matches[0]);
		} else {
			return new optional<string>;
		}
	}
}
