/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.lambdas.internals;

using com.apama.exceptions.Exception;

event OperatorUtils {
	static action decimalMod(decimal left, decimal right) returns decimal {
		return left - (right * (left / right).floor().toDecimal());
	}
	static action floatMod(float left, float right) returns float {
		return left - (right * (left / right).floor().toFloat());
	}
	static action decimalEqFloat(decimal d, float f) returns boolean {
		decimal d_abs := d.abs();
		float max_diff := (d_abs.nextafter(decimal.INFINITY) - d_abs).toFloat();
		float diff := (d.toFloat() - f).abs();
		return diff < max_diff;
	}
}

event UnarySubtract {
	dictionary<string, action<> returns any> closureGetters;
	string rightObject;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string rightObject) returns action<> returns any {
		return UnarySubtract(closureGetters, rightObject).subtract;
	}
	
	action subtract() returns any {
		if not closureGetters.hasKey(rightObject) {
			throw Exception("Unknown object: " + rightObject, "CompilationException");
		}
		any right := closureGetters[rightObject]();
		switch (right) {
			case float: {
				return -right;
			}
			case decimal: {
				return -right;
			}
			case integer: {
				return -right;
			}
		}
	}
}

event UnaryNegate {
	dictionary<string, action<> returns any> closureGetters;
	string rightObject;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string rightObject) returns action<> returns any {
		return UnaryNegate(closureGetters, rightObject).negate;
	}
	
	action negate() returns any {
		if not closureGetters.hasKey(rightObject) {
			throw Exception("Unknown object: " + rightObject, "CompilationException");
		}
		any right := closureGetters[rightObject]();
		switch (right) {
			case integer: {
				return not right;
			}
			case boolean: {
				return not right;
			}
		}
	}
}

event OperatorHandler {
	dictionary<string, action<> returns any> closureGetters;
	action<action<> returns any, action<> returns any> returns any operator;
	string leftObject;
	string rightObject;
	
	static action create(action<action<> returns any, action<> returns any> returns any operator, dictionary<string, action<> returns any> closureGetters, string leftObject, string rightObject) returns action<> returns any {
		return OperatorHandler(closureGetters, operator, leftObject, rightObject).callback;
	}
	
	action callback() returns any {
		if not closureGetters.hasKey(leftObject) {
			throw Exception("Unknown object: " + leftObject, "CompilationException");
		}
		if not closureGetters.hasKey(rightObject) {
			throw Exception("Unknown object: " + rightObject, "CompilationException");
		}
		return operator(closureGetters[leftObject], closureGetters[rightObject]);
	}
}

event Operators {
	static action equals(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal = rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() = rightVal;
					}
					case float: {
						return leftVal.toFloat() = rightVal;
					}
					default: {
						return <any>leftVal = rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal = rightVal.toDecimal();
					}
					case decimal: {
						return leftVal = rightVal;
					}
					case float: {
						return OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal = rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal = rightVal.toFloat();
					}
					case decimal: {
						return OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal = rightVal;
					}
					default: {
						return <any>leftVal = rightVal;
					}
				}
			}
			default: {
				return leftVal = rightVal;
			}
		}
	}
	
	static action greaterThan(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal > rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() > rightVal;
					}
					case float: {
						return leftVal.toFloat() > rightVal;
					}
					default: {
						return <any>leftVal > rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal > rightVal.toDecimal();
					}
					case decimal: {
						return leftVal > rightVal;
					}
					case float: {
						return leftVal.toFloat() > rightVal and not OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal > rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal > rightVal.toFloat();
					}
					case decimal: {
						return leftVal > rightVal.toFloat() and not OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal > rightVal;
					}
					default: {
						return <any>leftVal > rightVal;
					}
				}
			}
			default: {
				return leftVal > rightVal;
			}
		}
	}
	
	static action lessThan(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal < rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() < rightVal;
					}
					case float: {
						return leftVal.toFloat() < rightVal;
					}
					default: {
						return <any>leftVal < rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal < rightVal.toDecimal();
					}
					case decimal: {
						return leftVal < rightVal;
					}
					case float: {
						return leftVal.toFloat() < rightVal and not OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal < rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal < rightVal.toFloat();
					}
					case decimal: {
						return leftVal < rightVal.toFloat() and not OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal < rightVal;
					}
					default: {
						return <any>leftVal < rightVal;
					}
				}
			}
			default: {
				return leftVal < rightVal;
			}
		}
	}
	
	static action greaterThanEq(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal >= rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() >= rightVal;
					}
					case float: {
						return leftVal.toFloat() >= rightVal;
					}
					default: {
						return <any>leftVal >= rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal >= rightVal.toDecimal();
					}
					case decimal: {
						return leftVal >= rightVal;
					}
					case float: {
						return leftVal.toFloat() > rightVal or OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal >= rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal >= rightVal.toFloat();
					}
					case decimal: {
						return leftVal > rightVal.toFloat() or OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal >= rightVal;
					}
					default: {
						return <any>leftVal >= rightVal;
					}
				}
			}
			default: {
				return leftVal >= rightVal;
			}
		}
	}

	static action lessThanEq(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal <= rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() <= rightVal;
					}
					case float: {
						return leftVal.toFloat() <= rightVal;
					}
					default: {
						return <any>leftVal <= rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal <= rightVal.toDecimal();
					}
					case decimal: {
						return leftVal <= rightVal;
					}
					case float: {
						return leftVal.toFloat() < rightVal or OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal <= rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal <= rightVal.toFloat();
					}
					case decimal: {
						return leftVal < rightVal.toFloat() or OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal <= rightVal;
					}
					default: {
						return <any>leftVal <= rightVal;
					}
				}
			}
			default: {
				return leftVal <= rightVal;
			}
		}
	}
	
	static action plus(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case decimal: {
				switch(rightVal) {
					case decimal: {
						return leftVal + rightVal;
					}
					case float: {
						return leftVal.toFloat() + rightVal;
					}
					case integer: {
						return leftVal + rightVal.toDecimal();
					}
					default: {
						return leftVal.toString() + rightVal.valueToString();
					}
				}
			}
			case float: {
				switch(rightVal) {
					case decimal: {
						return leftVal + rightVal.toFloat();
					}
					case float: {
						return leftVal + rightVal;
					}
					case integer: {
						return leftVal + rightVal.toFloat();
					}
					default: {
						return leftVal.toString() + rightVal.valueToString();
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case decimal: {
						return leftVal.toDecimal() + rightVal;
					}
					case float: {
						return leftVal.toFloat() + rightVal;
					}
					case integer: {
						return leftVal + rightVal;
					}
					default: {
						return leftVal.toString() + rightVal.valueToString();
					}
				}
			}
			default: {
				return leftVal.valueToString() + rightVal.valueToString();
			}
		}
	}
	
	static action minus(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case decimal: {
				switch(rightVal) {
					case decimal: {
						return leftVal - rightVal;
					}
					case float: {
						return leftVal.toFloat() - rightVal;
					}
					case integer: {
						return leftVal - rightVal.toDecimal();
					}
				}
			}
			case float: {
				switch(rightVal) {
					case decimal: {
						return leftVal - rightVal.toFloat();
					}
					case float: {
						return leftVal - rightVal;
					}
					case integer: {
						return leftVal - rightVal.toFloat();
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case decimal: {
						return leftVal.toDecimal() - rightVal;
					}
					case float: {
						return leftVal.toFloat() - rightVal;
					}
					case integer: {
						return leftVal - rightVal;
					}
				}
			}
		}
	}
	
	static action mod(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case decimal: {
				switch(rightVal) {
					case decimal: {
						return OperatorUtils.decimalMod(leftVal, rightVal);
					}
					case float: {
						return OperatorUtils.floatMod(leftVal.toFloat(), rightVal);
					}
					case integer: {
						return OperatorUtils.decimalMod(leftVal, rightVal.toDecimal());
					}
				}
			}
			case float: {
				switch(rightVal) {
					case decimal: {
						return OperatorUtils.floatMod(leftVal, rightVal.toFloat());
					}
					case float: {
						return OperatorUtils.floatMod(leftVal, rightVal);
					}
					case integer: {
						return OperatorUtils.floatMod(leftVal, rightVal.toFloat());
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case decimal: {
						return OperatorUtils.decimalMod(leftVal.toDecimal(), rightVal);
					}
					case float: {
						return OperatorUtils.floatMod(leftVal.toFloat(), rightVal);
					}
					case integer: {
						return leftVal % rightVal;
					}
				}
			}
		}
	}
	
	static action divide(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case decimal: {
				switch(rightVal) {
					case decimal: {
						return leftVal / rightVal;
					}
					case float: {
						return leftVal.toFloat() / rightVal;
					}
					case integer: {
						return leftVal / rightVal.toDecimal();
					}
				}
			}
			case float: {
				switch(rightVal) {
					case decimal: {
						return leftVal / rightVal.toFloat();
					}
					case float: {
						return leftVal / rightVal;
					}
					case integer: {
						return leftVal / rightVal.toFloat();
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case decimal: {
						return leftVal.toDecimal() / rightVal;
					}
					case float: {
						return leftVal.toFloat() / rightVal;
					}
					case integer: {
						return leftVal.toFloat() / rightVal.toFloat();
					}
				}
			}
		}
	}
	
	static action multiply(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case decimal: {
				switch(rightVal) {
					case decimal: {
						return leftVal * rightVal;
					}
					case float: {
						return leftVal.toFloat() * rightVal;
					}
					case integer: {
						return leftVal * rightVal.toDecimal();
					}
				}
			}
			case float: {
				switch(rightVal) {
					case decimal: {
						return leftVal * rightVal.toFloat();
					}
					case float: {
						return leftVal * rightVal;
					}
					case integer: {
						return leftVal * rightVal.toFloat();
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case decimal: {
						return leftVal.toDecimal() * rightVal;
					}
					case float: {
						return leftVal.toFloat() * rightVal;
					}
					case integer: {
						return leftVal * rightVal;
					}
				}
			}
		}
	}
	
	static action notEquals(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal != rightVal;
					}
					case decimal: {
						return leftVal.toDecimal() != rightVal;
					}
					case float: {
						return leftVal.toFloat() != rightVal;
					}
					default: {
						return <any>leftVal != rightVal;
					}
				}
			}
			case decimal: {
				switch(rightVal) {
					case integer: {
						return leftVal != rightVal.toDecimal();
					}
					case decimal: {
						return leftVal != rightVal;
					}
					case float: {
						return not OperatorUtils.decimalEqFloat(leftVal, rightVal);
					}
					default: {
						return <any>leftVal != rightVal;
					}
				}
			}
			case float: {
				switch(rightVal) {
					case integer: {
						return leftVal != rightVal.toFloat();
					}
					case decimal: {
						return not OperatorUtils.decimalEqFloat(rightVal, leftVal);
					}
					case float: {
						return leftVal != rightVal;
					}
					default: {
						return <any>leftVal != rightVal;
					}
				}
			}
			default: {
				return leftVal != rightVal;
			}
		}
	}
	
	static action logicalAnd(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		switch(leftVal) {
			case boolean: {
				if not leftVal {
					return false;
				} else {
					any rightVal := right();
					switch(rightVal) {
						case boolean: {
							return rightVal;
						}
					}
				}
			}
			case integer: {
				any rightVal := right();
				switch(rightVal) {
					case integer: {
						return leftVal and rightVal;
					}
				}
			}
		}
	}
	
	static action logicalOr(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		switch(leftVal) {
			case boolean: {
				if leftVal {
					return true;
				} else {
					any rightVal := right();
					switch(rightVal) {
						case boolean: {
							return rightVal;
						}
					}
				}
			}
			case integer: {
				any rightVal := right();
				switch(rightVal) {
					case integer: {
						return leftVal or rightVal;
					}
				}
			}
		}
	}
	
	static action logicalXor(action<> returns any left, action<> returns any right) returns any {
		any leftVal := left();
		any rightVal := right();
		switch(leftVal) {
			case boolean: {
				switch(rightVal) {
					case boolean: {
						return leftVal xor rightVal;
					}
				}
			}
			case integer: {
				switch(rightVal) {
					case integer: {
						return leftVal xor rightVal;
					}
				}
			}
		}
	}
}