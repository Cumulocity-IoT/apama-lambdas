/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.lambdas;

using com.industry.lambdas.internals.ExpressionCompiler;
using com.industry.lambdas.internals.PredicateFromFunction;
using com.industry.lambdas.internals.CallFromFunction;
using com.industry.lambdas.internals.ToFixedArgCount;
using com.industry.lambdas.internals.ValueGetter;
using com.industry.lambdas.internals.Undefined;

using com.apama.exceptions.Exception;
using com.apama.exceptions.StackTraceElement;

event Lambda {
	dictionary<string, action<> returns any> closureGetters;
	sequence<string> argumentNames;
	dictionary<string, sequence<string> > destructuredArgs;
	action<> returns any compiledExpression;
	
	sequence<StackTraceElement> definitionStackTrace;
	
	static action closureFunction(string expression, any closureVars) returns action<sequence<any> > returns any {
		dictionary<string, action<> returns any> closureGetters := new dictionary<string, action<> returns any>;
		any valueName;
		for valueName in closureVars.getKeys() {
			closureGetters.add(valueName.valueToString(), ValueGetter.create(closureVars.getEntry(valueName)));
		}
		
		// Handle FatArrow syntax
		sequence<string> argsAndExpression := "=>".split(expression);
		string argString := argsAndExpression[0];
		dictionary<string, sequence<string> > destructuredArgs := new dictionary<string, sequence<string> >;
		sequence<string> args := new sequence<string>;		
		if argsAndExpression.size() = 2 {
			// Handle destructing (Can only destructure one level)
			integer i := 0;
			while i < argString.length() {
				string currentCharacter := argString.substring(i, i + 1);
				if currentCharacter = "[" {
					integer j := argString.findFrom("]", i);
					if j = -1 {
						throw Exception("Invalid sequence destructuring. Missing ']'.", "CompilationException");
					}
					string destructedArgString := argString.substring(i + 1, j);
					sequence<string> destructuredArgNames := ",".split(destructedArgString.replace("(!g)\\s",""));
					string destructuredName := "$_" + integer.getUnique().toString();
					argString := argString.substring(0, i) + destructuredName + argString.substring(j + 1,argString.length());
					destructuredArgs.add(destructuredName, destructuredArgNames);
					i := i + destructuredName.length();
				} else if currentCharacter = "]" {
					throw Exception("Invalid sequence destructuring. Missing '['.", "CompilationException");
				}
				i := i + 1;
			}
			
			// Split the normal args
			args := ",".split(argString.replace("(!g)\\s",""));
			expression := argsAndExpression[1];
		} else if argsAndExpression.size() > 2  {
			throw Exception("Can't have multiple: =>", "CompilationException");
		}
		
		string argName;
		for argName in args {
			closureGetters.add(argName, Undefined.create(argName));	
		}
		sequence<string> dArgs;
		for dArgs in destructuredArgs.values() {
			for argName in dArgs {
				closureGetters.add(argName, Undefined.create(argName));
			}
		}
		
		try {
			throw Exception("Lambda Definition", "LambdaException");
		} catch(Exception e) {
			sequence<StackTraceElement> usefulStackTrace := new sequence<StackTraceElement>;
			StackTraceElement s;
			for s in e.getStackTrace() {
				if s.getTypeName().find("com.industry.lambdas") != 0 {
					usefulStackTrace.append(s);
				}
			}
			
			return Lambda(closureGetters, args, destructuredArgs, ExpressionCompiler.create(expression, closureGetters).compile(), usefulStackTrace).multiArgCaller;
		}
	}
	
	static action closureFunction0(string expression, any closureVars) returns action<> returns any {
		return ToFixedArgCount.create0(closureFunction(expression, closureVars));
	}
	
	static action closureFunction1(string expression, any closureVars) returns action<any> returns any {
		return ToFixedArgCount.create1(closureFunction(expression, closureVars));
	}
	
	static action closureFunction2(string expression, any closureVars) returns action<any, any> returns any {
		return ToFixedArgCount.create2(closureFunction(expression, closureVars));
	}
	
	static action function(string expression) returns action<sequence<any> > returns any {
		return closureFunction(expression, new any);
	}
	
	static action function0(string expression) returns action<> returns any {
		return ToFixedArgCount.create0(function(expression));
	}
	
	static action function1(string expression) returns action<any> returns any {
		return ToFixedArgCount.create1(function(expression));
	}
	
	static action function2(string expression) returns action<any, any> returns any {
		return ToFixedArgCount.create2(function(expression));
	}
	
	static action closurePredicate(string expression, any closureVars) returns action<any> returns boolean {
		return PredicateFromFunction.create(closureFunction1(expression, closureVars));
	}
	
	static action predicate(string expression) returns action<any> returns boolean {
		return closurePredicate(expression, new sequence<any>);
	}
	
	static action closureCall(string expression, any closureVars) returns action<any> {
		return CallFromFunction.create(closureFunction1(expression, closureVars));
	}
	
	static action call(string expression) returns action<any> {
		return closureCall(expression, new any);
	}
	
	action multiArgCaller(sequence<any> args) returns any {
		try {
			integer i := 0;
			while i < args.size() {
				action<> returns any valueGetter := ValueGetter.create(args[i]);
				closureGetters.add("$" + i.toString(), valueGetter);
				if argumentNames.size() > i {
					string argName := argumentNames[i];
					if destructuredArgs.hasKey(argName) {
						// It's a destructured arg
						sequence<string> destructuredArgNames := destructuredArgs[argName];
						integer j := 0;
						while j < destructuredArgNames.size() {
							if args[i].getTypeName().find("sequence") = 0 {
								action<> returns any destructuredValueGetter;
								try {
									destructuredValueGetter := ValueGetter.create(args[i].getEntry(j));
								} catch (Exception e) {
									destructuredValueGetter := Undefined.create(destructuredArgNames[j]);
								}
								closureGetters.add(destructuredArgNames[j], destructuredValueGetter);
							} else {
								throw Exception("Can only destructure a sequence, was: " + args[i].valueToString(), "RuntimeException");
							}
							j := j + 1;
						}
					} else {
						// It's a normal arg
						closureGetters.add(argName, valueGetter);
					}
				}
				i := i + 1;
			}
			if args.size() > 0 {
				closureGetters.add("$", closureGetters["$0"]);
			}
			return compiledExpression();
		} catch(Exception e) {
			string definitionStString := "Lambda Definition:";
			StackTraceElement s;
			for s in definitionStackTrace {
				definitionStString := definitionStString + "\n\t" + s.getTypeName() + "." + s.getActionName() + " " + s.getFilename() + ":" + s.getLineNumber().toString();
			}
			throw Exception(e.getMessage() + "\n" + definitionStString + "\nOriginal Exception: " + e.toStringWithStackTrace(), e.getType());
		}
	}
}
