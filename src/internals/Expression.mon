package com.industry.lambdas.internals;

using com.apama.exceptions.Exception;

event Undefined {
	string name;
	static action create(string name) returns action<> returns any {
		return Undefined(name).getter;
	}
	
	action getter() returns any {
		throw Exception("Value: " + name + " was not provided", "UndefinedValue");
	}
}

event ValueFromClosure {
	dictionary<string, action<> returns any> closureGetters;
	string objectName;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string objectName) returns action<> returns any {
		return ValueFromClosure(closureGetters, objectName).callback;
	}
	
	action callback() returns any {
		if not closureGetters.hasKey(objectName) {
			throw Exception("Unknown object: " + objectName, "CompilationException");
		}
		return closureGetters[objectName]();
	}
}

event SequenceHandler {
	sequence<action<> returns any> sequenceValues;
	
	static action create(sequence<action<> returns any> sequenceValues) returns action<> returns any {
		return SequenceHandler(sequenceValues).toSequence;
	}
	
	action toSequence() returns any {
		sequence<any> result := new sequence<any>;
		action<> returns any value;
		for value in sequenceValues {
			result.append(value());
		}
		return result;
	}
}

event ValueGetter {
	any value;
	
	static action create(any value) returns action<> returns any {
		return ValueGetter(value).callback;
	}
	
	action callback() returns any {
		return value;
	}
}

event EventConstructor {
	string eventName;
	sequence<action<> returns any> args;
	
	static action create(string eventName, sequence<action<> returns any> args) returns action<> returns any {
		return EventConstructor(eventName, args).construct;
	}
	
	action construct() returns any {
		any result := any.newInstance(eventName);
		sequence<string> fieldTypes := result.getFieldTypes();
		integer i := 0;
		string fieldName;
		for fieldName in result.getFieldNames() {
			any value := args[i]();
			string fieldType := fieldTypes[i];
			if fieldType = "float" {
				switch(value as v) {
					case decimal: {
						value := v.toFloat();
					}
					case integer: {
						value := v.toFloat();
					}
					case string: {
						value := float.parse(v);
					}
					default: {}
				}
			} else if fieldType = "decimal" {
				switch(value as v) {
					case float: {
						value := v.toDecimal();
					}
					case integer: {
						value := v.toDecimal();
					}
					case string: {
						value := decimal.parse(v);
					}
					default: {}
				}				
			} else if fieldType = "integer" {
				switch(value as v) {
					case float: {
						value := v.round();
					}
					case decimal: {
						value := v.round();
					}
					case string: {
						value := integer.parse(v);
					}
					default: {}
				}				
			} else if fieldType = "string" {
				value := value.valueToString();
			}
			result.setField(fieldName, value);
			i := i + 1;
		}
		return result;
	}
}

event FieldAccess {
	dictionary<string, action<> returns any> closureGetters;
	string objectName;
	action<> returns any fieldKey;
	
	static action create(dictionary<string, action<> returns any> closureGetters, string objectName, action<> returns any fieldKey) returns action<> returns any {
		return FieldAccess(closureGetters, objectName, fieldKey).callback;
	}
	
	action callback() returns any {
		if not closureGetters.hasKey(objectName) {
			throw Exception("Unknown object: " + objectName, "CompilationException");
		}
		return closureGetters[objectName]().getEntry(fieldKey());
	}
}

event BracketLocation {
	boolean isActionOrConstructorCall;
	integer start;
}

event ExpressionCompiler {
	string expression;
	dictionary<string, action<> returns any> closureGetters;
	
	static action create(string expression, dictionary<string, action<> returns any> closureGetters) returns ExpressionCompiler {
		return ExpressionCompiler(expression, closureGetters);
	}
	
	action compile() returns action<> returns any {
		literalsToPointers();
		squareBracketsToActions();
		bracketsToActions();
		fieldAccessToActions();
		unarySubtractToAction();
		operatorsToActions();
		unaryNegateToActions();
		booleanOperatorsToActions();
		return toAction();
	}
	
	action literalsToPointers() {
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter.matches("([$_a-zA-Z]|(\\)\\.))") { // Check for variables and/or methodCalls
				integer lengthOfVar := remainingString.search("(\\$|\\w|\\.)+")[0].length();
				string variableName := remainingString.substring(0, lengthOfVar);
				
				if variableName.matches("^true($|(?!\\$|\\w))") { // Boolean literals
					string substitutionName := "$_" + integer.getUnique().toString();
					closureGetters.add(substitutionName, ValueGetter.create(true));
					expression := expression.substring(0, i) + substitutionName + expression.substring(i + "true".length(), expression.length());
					i := i + lengthOfVar - "true".length() + substitutionName.length();
					continue;
				} else if variableName.matches("^false($|(?!\\$|\\w))") {
					string substitutionName := "$_" + integer.getUnique().toString();
					closureGetters.add(substitutionName, ValueGetter.create(false));
					expression := expression.substring(0, i) + substitutionName + expression.substring(i + "false".length(), expression.length());
					i := i + lengthOfVar - "false".length() + substitutionName.length();
					continue;
				} else {
					i := i + lengthOfVar;
					continue;
				}
			} else if currentCharacter.matches("\\d") { // Check for numeric values
				integer lengthOfValue := remainingString.search("\\d+(\\.\\d*d?)?")[0].length();
				string valueString := remainingString.substring(0, lengthOfValue);
				string substitutionName := "$_" + integer.getUnique().toString();
				if valueString.find("d") != -1 {
					closureGetters.add(substitutionName, ValueGetter.create(decimal.parse(valueString)));
				} else if valueString.find(".") != -1 {
					closureGetters.add(substitutionName, ValueGetter.create(float.parse(valueString)));
				} else {
					closureGetters.add(substitutionName, ValueGetter.create(integer.parse(valueString)));
				}
				expression := expression.substring(0, i) + substitutionName + expression.substring(i + lengthOfValue, expression.length());
				continue;
			} else if currentCharacter = "\"" or currentCharacter = "'" { // Check for string values
				string quoteType := currentCharacter;
				boolean foundEnd := false;
				integer lengthOfString := 1;
				while lengthOfString < remainingString.length() {
					string currentCharacter := remainingString.substring(lengthOfString, lengthOfString+1);
					lengthOfString := lengthOfString + 1;
					if currentCharacter = "\\" { // Skip escaped characters
						lengthOfString := lengthOfString + 1;
					} else if currentCharacter = quoteType { // Found end of string
						foundEnd := true;
						break;
					}
				}
				if not foundEnd {
					throw Exception("String value not closed, no matching: " + quoteType, "CompilationException");
				}
				string valueString := remainingString.substring(1, lengthOfString-1);
				string substitutionName := "$_" + integer.getUnique().toString();
				closureGetters.add(substitutionName, ValueGetter.create(string.parse("\"" + valueString + "\"")));
				expression := expression.substring(0, i) + substitutionName + expression.substring(i + lengthOfString, expression.length());
				continue;
			}
			i := i + 1;
		}
	}
	
	action squareBracketsToActions() {
		boolean isDictionaryAccess := false;
		sequence<BracketLocation> brackets := new sequence<BracketLocation>;
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "[" {
				brackets.append(BracketLocation(isDictionaryAccess, i));
				isDictionaryAccess := false;
			} else if currentCharacter = "]" {
				BracketLocation completedBracket := brackets[brackets.size() - 1];
				if completedBracket.isActionOrConstructorCall {
					// This is field, dictionary, or array access (it is handled in the fieldAccess section)
				} else {
					// This is sequence literal
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					
					sequence<action<> returns any> sequenceValues := new sequence<action<> returns any>;
					if not innerExpression.matches("\\s*") {
						string value;
						for value in ",".split(innerExpression) {
							sequenceValues.append(ExpressionCompiler.create(value, closureGetters).compile());
						}
					}

					string innerPointerName := "$_" + integer.getUnique().toString();
					closureGetters.add(innerPointerName, SequenceHandler.create(sequenceValues));
					
					expression := expression.substring(0, completedBracket.start) + innerPointerName + expression.substring(i + 1, expression.length());
					i := completedBracket.start + innerPointerName.length() - 1;
				}
				brackets.remove(brackets.size() - 1);
			} else if currentCharacter.matches("\\$|\\w") {
				isDictionaryAccess := true;
			} else {
				isDictionaryAccess := false;
			}
			i := i + 1;
		}
	}
	
	action bracketsToActions() {
		boolean isActionOrConstructorCall := false;
		sequence<BracketLocation> brackets := new sequence<BracketLocation>;
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "(" {
				brackets.append(BracketLocation(isActionOrConstructorCall, i));
				isActionOrConstructorCall := false;
			} else if currentCharacter = ")" {
				BracketLocation completedBracket := brackets[brackets.size() - 1];
				if completedBracket.isActionOrConstructorCall {
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					
					string beforeBracket := expression.substring(0, completedBracket.start);
					
					boolean isEventConstruction := false;
					optional<string> eventName := firstMatch(beforeBracket, "(\\)|\\$|\\w|\\.)+$"); // Check to see if it's an event construction
					ifpresent eventName {
						if eventName.matches("\\w(\\w|\\.)*") {
							// If the event is valid then we assume they meant to construct an event
							// Otherwise it's probably a method call
							boolean isValidEvent := true;
							
							// Check if the event has been hidden by a variable
							optional<string> root := firstMatch(eventName, "^\\w+");
							ifpresent root { 
								if closureGetters.hasKey(root) {
									// The event has been hidden
									isValidEvent := false;
								}
							}
							if isValidEvent {
								try {
									any test := any.newInstance(eventName); // Try constructing the event to see if it is valid								
								} catch(Exception e) {
									isValidEvent := false;
								}
							}
							if isValidEvent {
								sequence<action<> returns any> args := new sequence<action<> returns any>;
								if not innerExpression.matches("\\s*") {
									sequence<string> argStrings := ",".split(innerExpression);
									string arg;
									for arg in argStrings {
										args.append(ExpressionCompiler.create(arg, closureGetters).compile());
									}
								}
								string actionPointerName := "$_" + integer.getUnique().toString();
								closureGetters.add(actionPointerName, EventConstructor.create(eventName, args));
								expression := expression.substring(0, completedBracket.start - eventName.length()) + actionPointerName + expression.substring(i + 1, expression.length());
								i := completedBracket.start + actionPointerName.length() - eventName.length() - 1;
								isEventConstruction := true;
							}
						}
					}
					if not isEventConstruction {
						// TODO: implement action calls
						throw Exception("Can't currently call actions", "NotImplemented");
					}
				} else {
					string innerExpression := expression.substring(completedBracket.start + 1, i);
					string innerPointerName := "$_" + integer.getUnique().toString();
					closureGetters.add(innerPointerName, ExpressionCompiler.create(innerExpression, closureGetters).compile());
					expression := expression.substring(0, completedBracket.start) + innerPointerName + expression.substring(i + 1, expression.length());
					i := completedBracket.start + innerPointerName.length() - 1;
				}
				brackets.remove(brackets.size() - 1);
			} else if currentCharacter.matches("\\$|\\w") {
				isActionOrConstructorCall := true;
			} else {
				isActionOrConstructorCall := false;
			}
			i := i + 1;
		}
	}
	
	action fieldAccessToActions() {
		integer i := 0;
		while i < expression.length() {
			string currentCharacter := expression.substring(i, i+1);
			string processedString := expression.substring(0, i);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = "." { // Check for variables and/or methodCalls
				string objectName := processedString.search("(\\$|\\w)+$")[0];
				string fieldName := remainingString.substring(1, remainingString.length()).search("^(\\$|\\w)+")[0];
				// TODO: handle methodCalling
				string actionPointerName := "$_" + integer.getUnique().toString();
				closureGetters.add(actionPointerName, FieldAccess.create(closureGetters, objectName, ValueGetter.create(fieldName)));
				expression := expression.substring(0, i - objectName.length()) + actionPointerName + expression.substring(i + fieldName.length() + 1, expression.length());
				i := i - objectName.length() + actionPointerName.length() - 1;
			} else if currentCharacter = "[" and i > 0 and expression.substring(i-1, i).matches("(\\$|\\w)") { // Check for fieldAccess via sqrBrackets
				integer bracketCount := 1;
				integer j := i + 1;
				while j < expression.length() {
					string currentCharacter := expression.substring(j, j+1);
					if currentCharacter = "[" {
						bracketCount := bracketCount + 1;
					} else if currentCharacter = "]" {
						bracketCount := bracketCount - 1;
						if bracketCount = 0 {
							string objectName := processedString.search("(\\$|\\w)+$")[0];
							string fieldKeyExp := expression.substring(i + 1, j);
							string actionPointerName := "$_" + integer.getUnique().toString();
							closureGetters.add(actionPointerName, FieldAccess.create(closureGetters, objectName, ExpressionCompiler.create(fieldKeyExp, closureGetters).compile()));
							expression := expression.substring(0, i - objectName.length()) + actionPointerName + expression.substring(j + 1, expression.length());
							i := i - objectName.length() + actionPointerName.length() - 1;
						}
					}
					j := j + 1;
				}
				if bracketCount > 0 {
					throw Exception("Unmatched bracket '['", "CompilationException");
				}
			}
			i := i + 1;
		}
	}
	
	action operatorsToActions() {
		sequence<string> operatorPrecedence := ["%", "/", "*", "-", "+"];		
		string operator;
		for operator in operatorPrecedence {
			operatorToActions(operator);
		}
	}
	
	action operatorToActions(string operator) {
		dictionary<string, action<dictionary<string, action<> returns any>, string, string> returns action<> returns any> operatorHandlers := {
			"%": OperatorHandler.create(Operators.mod),
			"/": OperatorHandler.create(Operators.divide),
			"*": OperatorHandler.create(Operators.multiply),
			"-": OperatorHandler.create(Operators.minus),
			"+": OperatorHandler.create(Operators.plus),
			"=": OperatorHandler.create(Operators.equals),
			"!=": OperatorHandler.create(Operators.notEquals),
			">=": OperatorHandler.create(Operators.greaterThanEq),
			">": OperatorHandler.create(Operators.greaterThan),
			"<=": OperatorHandler.create(Operators.lessThanEq),
			"<": OperatorHandler.create(Operators.lessThan),
			"and": OperatorHandler.create(Operators.logicalAnd),
			"xor": OperatorHandler.create(Operators.logicalXor),
			"or": OperatorHandler.create(Operators.logicalOr)
		};
		
		integer i := 0;
		while i < expression.length() - (operator.length() - 1) {
			string currentCharacter := expression.substring(i, i + operator.length());
			string processedString := expression.substring(0, i);
			string remainingString := expression.substring(i, expression.length());
			if currentCharacter = operator {
				optional<string> leftObject := firstMatch(processedString, "(\\$|\\w)+\\s*$");
				ifpresent leftObject {
					optional<string> rightObject := firstMatch(remainingString.substring(operator.length(), remainingString.length()), "^\\s*(\\$|\\w)+");
					ifpresent rightObject {
						string actionPointerName := "$_" + integer.getUnique().toString();
						closureGetters.add(actionPointerName, operatorHandlers[operator](closureGetters, leftObject.rtrim(), rightObject.ltrim()));
						expression := expression.substring(0, i - leftObject.length()) + actionPointerName + expression.substring(i + rightObject.length() + operator.length(), expression.length());
						i := i - leftObject.length() + actionPointerName.length() - 1;
					}
				}
			}
			i := i + 1;
		}
	}
	

	action booleanOperatorsToActions() {
		sequence<string> operatorPrecedence := ["=", "!=", ">=", ">", "<=", "<", "and", "xor", "or"];
		
		string operator;
		for operator in operatorPrecedence {
			operatorToActions(operator);
		}
	}
	
	action unarySubtractToAction() {
		if expression.matches("^\\s*-.*") {
			string negateString := expression.search("^\\s*-")[0];
			string rightObject := expression.substring(negateString.length(), expression.length()).search("^\\s*(\\$|\\w)+")[0];
			
			string actionPointerName := "$_" + integer.getUnique().toString();
			closureGetters.add(actionPointerName, UnarySubtract.create(closureGetters, rightObject.ltrim()));
			expression := actionPointerName + expression.substring(rightObject.length() + negateString.length(), expression.length());
		}
	}
	
	action unaryNegateToActions() {
		sequence<string> operators := ["not", "!"];
		string operator;
		for operator in operators {
			integer i := 0;
			while i < expression.length() - (operator.length() - 1) {
				string currentCharacter := expression.substring(i, i+operator.length());
				string processedString := expression.substring(0, i);
				string remainingString := expression.substring(i, expression.length());
				if currentCharacter = operator {
					optional<string> rightObject := firstMatch(remainingString.substring(operator.length(), remainingString.length()), "^\\s*(\\$|\\w)+");
					ifpresent rightObject {
						string actionPointerName := "$_" + integer.getUnique().toString();
						closureGetters.add(actionPointerName, UnaryNegate.create(closureGetters, rightObject.ltrim()));
						expression := expression.substring(0, i) + actionPointerName + expression.substring(i + rightObject.length() + operator.length(), expression.length());
						i := i + actionPointerName.length() - 1;
					}
				}
				i := i + 1;
			}
		}
	}
	
	action toAction() returns action<> returns any {
		expression := expression.ltrim().rtrim();
		return ValueFromClosure.create(closureGetters, expression);
	}
	
	static action firstMatch(string value, string regex) returns optional<string> {
		sequence<string> matches := value.search(regex);
		if matches.size() > 0 {
			return optional<string>(matches[0]);
		} else {
			return new optional<string>;
		}
	}
}
